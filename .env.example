# This is an example .env file. Copy this to .env and fill in your actual values.
# The .env file should be added to .gitignore to avoid committing sensitive credentials.

# --- Backend Application Configuration ---
# Default administrator credentials for initial setup (if applicable)
APP_DEFAULT_ADMIN_USERNAME=admin
APP_DEFAULT_ADMIN_PASSWORD=changeme# Strong, unique password recommended

# --- Database Configuration ---
# Replace with your actual database connection details.
# For Docker, 'host.docker.internal' often refers to the host machine from within a container.
# If PostgreSQL is another Docker service, use its service name (e.g., postgres_db).
DB_HOST=host.docker.internal
DB_PORT=5432
DB_NAME=mcbuildlibrary
DB_USERNAME=mcbuilduser_dev# Example: your local development username
DB_PASSWORD=supersecretpassword_dev# Example: your local development password

# JDBC URL constructed from the above. Ensure the protocol matches your database (e.g., postgresql, mysql).
# For PostgreSQL:
DB_URL=jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
# For MySQL/MariaDB (example, if you were to switch):
# DB_URL=jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}?useSSL=false&serverTimezone=UTC

# --- Backend Service Configuration (for docker-compose) ---
# Port mapping for the backend service
BACKEND_PORT_HOST=8080
BACKEND_PORT_CONTAINER=8080
# Name and path of the JAR file (ensure these match your build output)
BACKEND_JAR_FILE_NAME=MCBuildLibrary-0.0.1-SNAPSHOT.jar
BACKEND_JAR_FILE_PATH=target

# --- Frontend Service Configuration (for docker-compose) ---
# Port mapping for the frontend service
FRONTEND_PORT_HOST=3000
FRONTEND_PORT_CONTAINER=80# Nginx in the container typically listens on port 80

# --- Other Optional Configurations ---
# Example: API keys for external services (if any)
# THIRD_PARTY_API_KEY=your_api_key_here

# Example: Logging level for the application
# LOGGING_LEVEL_APP=INFO